uncorrected <- loadRDS('/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/altered_fcs_files/post_flowai/uncorrected.RDS')
uncorrected <- readRDS('/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/altered_fcs_files/post_flowai/uncorrected.RDS')
seed_num <- sample(1:100, 1) #Setting a random seed number
corrected <- batch_correct(
df = uncorrected,
covar = "condition",
markers = markers,
norm_method = "scale", # "rank" is recommended when combining data with heavy batch effects
rlen = 10, # Higher values are recommended if 10 does not appear to perform well
seed = seed_num # Recommended to use your own random seed
)
library(cyCombine)
library(tidyverse)
panel_file <- paste0("/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/panel_metadata_all_batches.csv") # Can also be .xlsx
metadata_file <- paste0("/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/stroke_impact_metadata_all_batches.csv") # Can also be .xlsx
print('Meta data loaded')
# Extract markers of interest
markers <- read.csv(panel_file) %>%
filter(Type != "None") %>%
pull(Antigen)
seed_num <- sample(1:100, 1) #Setting a random seed number
corrected <- batch_correct(
df = uncorrected,
covar = "condition",
markers = markers,
norm_method = "scale", # "rank" is recommended when combining data with heavy batch effects
rlen = 10, # Higher values are recommended if 10 does not appear to perform well
seed = seed_num # Recommended to use your own random seed
)
sapply(uncorrected, function(column) any(is.na(column)))
metadata_csv_look<- read.csv('/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/stroke_impact_metadata_all_batches.csv')
sapply(metadata_csv_look, function(column) any(is.na(column)))
markers
# Extract markers from panel
panel_file <- paste0("/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/panel_metadata_all_batches.csv") # Can also be .xlsx
metadata_file <- paste0("/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/stroke_impact_metadata_all_batches.csv") # Can also be .xlsx
print('Meta data loaded')
# Extract markers of interest
markers <- read.csv(panel_file) %>%
filter(Type != "None") %>%
pull(Antigen)
# Directory with FCS files
data_dir <- "/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/altered_fcs_files/post_flowai"
# Extract markers from panel
panel_file <- paste0("/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/panel_metadata_all_batches.csv") # Can also be .xlsx
metadata_file <- paste0("/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/stroke_impact_metadata_all_batches.csv") # Can also be .xlsx
print('Meta data loaded')
# Extract markers of interest
markers <- read.csv(panel_file) %>%
filter(Type != "None") %>%
pull(Antigen)
markers
# Prepare a tibble from directory of FCS files
uncorrected <- prepare_data(
data_dir = data_dir,
metadata = metadata_file,
filename_col = "Filename",
batch_ids = "batch",
condition = "condition",
sample_ids = "Patient_id",
markers = markers,
down_sample = FALSE,
.keep = FALSE,
clean_colnames = FALSE,
panel = panel_file,
panel_channel = "Channel",
panel_antigen = "Antigen",
transform = TRUE)
# Install cyCombine package from GitHub
devtools::install_github("biosurf/cyCombine")
library(cyCombine)
library(tidyverse)
print('Everything loaded in')
# Directory with FCS files
data_dir <- "/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/altered_fcs_files/post_flowai"
# Extract markers from panel
panel_file <- paste0("/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/panel_metadata_all_batches.csv") # Can also be .xlsx
metadata_file <- paste0("/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/stroke_impact_metadata_all_batches.csv") # Can also be .xlsx
print('Meta data loaded')
# Extract markers of interest
markers <- read.csv(panel_file) %>%
filter(Type != "None") %>%
pull(Antigen)
markers
# Prepare a tibble from directory of FCS files
uncorrected <- prepare_data(
data_dir = data_dir,
metadata = metadata_file,
filename_col = "Filename",
batch_ids = "batch",
condition = "condition",
sample_ids = "Patient_id",
markers = markers,
down_sample = FALSE,
.keep = FALSE,
clean_colnames = FALSE,
panel = panel_file,
panel_channel = "Channel",
panel_antigen = "Antigen",
transform = TRUE)
print('Uncorrected Tibble made')
# Store result in dir
saveRDS(uncorrected, file = file.path(data_dir, "uncorrected.RDS"))
print('Uncorrected RDS Made')
seed_num <- sample(1:100, 1) #Setting a random seed number
corrected <- batch_correct(
df = uncorrected,
covar = "condition",
markers = markers,
norm_method = "scale", # "rank" is recommended when combining data with heavy batch effects
rlen = 10, # Higher values are recommended if 10 does not appear to perform well
seed = seed_num # Recommended to use your own random seed
)
saveRDS(corrected, file.path(data_dir, "corrected.RDS"))
print('Corrected Tibble made')
# Re-run clustering on corrected data
labels <- corrected %>%
create_som(markers = markers,
rlen = 10)
uncorrected$label <- corrected$label <- labels
# If it errors out here it is usually because there are NAs within one of the columns. FlowSOM won't be generated if NAs are in the markers, but if there are NAs in anything else find them with:
#metadata_csv_look<- read.csv('/Volumes/grainger/Common/stroke_impact_smart_tube/computational_outputs/fcs_files/metadata_files/stroke_impact_metadata_all_batches.csv')
#sapply(uncorrected, function(column) any(is.na(column)))
# Evaluate EMD
emd <- evaluate_emd(uncorrected, corrected, cell_col = "label")
# Reduction
emd$reduction
# Violin plot
emd$violin
# Scatter plot
emd$scatter
# Evaluate MAD
mad <- evaluate_mad(uncorrected, corrected, cell_col = "label")
# Score
mad$score
View(corrected)
colnames(corrected)
